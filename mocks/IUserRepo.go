// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	model "github.com/felixlambertv/go-cleanplate/internal/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	repository "github.com/felixlambertv/go-cleanplate/internal/repository"

	response "github.com/felixlambertv/go-cleanplate/internal/controller/response"
)

// IUserRepo is an autogenerated mock type for the IUserRepo type
type IUserRepo struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: user
func (_m *IUserRepo) DeleteUser(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: p
func (_m *IUserRepo) FindAll(p model.Pagination) (*model.Pagination, error) {
	ret := _m.Called(p)

	var r0 *model.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Pagination) (*model.Pagination, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(model.Pagination) *model.Pagination); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Pagination) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *IUserRepo) FindByEmail(email string) (*response.UserResponse, error) {
	ret := _m.Called(email)

	var r0 *response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*response.UserResponse, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *response.UserResponse); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *IUserRepo) FindById(id uint) (*response.UserResponse, error) {
	ret := _m.Called(id)

	var r0 *response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*response.UserResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *response.UserResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: user
func (_m *IUserRepo) Store(user *model.User) (*model.User, error) {
	ret := _m.Called(user)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user, userID
func (_m *IUserRepo) Update(user model.User, userID uint) (*model.User, error) {
	ret := _m.Called(user, userID)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User, uint) (*model.User, error)); ok {
		return rf(user, userID)
	}
	if rf, ok := ret.Get(0).(func(model.User, uint) *model.User); ok {
		r0 = rf(user, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(model.User, uint) error); ok {
		r1 = rf(user, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTrx provides a mock function with given fields: trxHandle
func (_m *IUserRepo) WithTrx(trxHandle *gorm.DB) repository.IUserRepo {
	ret := _m.Called(trxHandle)

	var r0 repository.IUserRepo
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.IUserRepo); ok {
		r0 = rf(trxHandle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.IUserRepo)
		}
	}

	return r0
}

type mockConstructorTestingTNewIUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserRepo creates a new instance of IUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserRepo(t mockConstructorTestingTNewIUserRepo) *IUserRepo {
	mock := &IUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
