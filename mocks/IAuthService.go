// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	request "github.com/felixlambertv/go-cleanplate/internal/controller/request"
	response "github.com/felixlambertv/go-cleanplate/internal/controller/response"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/felixlambertv/go-cleanplate/pkg/utils"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: req
func (_m *IAuthService) ForgotPassword(req request.ForgotPasswordRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.ForgotPasswordRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: req
func (_m *IAuthService) Login(req request.LoginRequest) (*response.UserResponse, *utils.TokenHeader, error) {
	ret := _m.Called(req)

	var r0 *response.UserResponse
	var r1 *utils.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(request.LoginRequest) (*response.UserResponse, *utils.TokenHeader, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.LoginRequest) *response.UserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.LoginRequest) *utils.TokenHeader); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(request.LoginRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RefreshAuthToken provides a mock function with given fields: token
func (_m *IAuthService) RefreshAuthToken(token string) (*response.UserResponse, *utils.TokenHeader, error) {
	ret := _m.Called(token)

	var r0 *response.UserResponse
	var r1 *utils.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*response.UserResponse, *utils.TokenHeader, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *response.UserResponse); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *utils.TokenHeader); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: req
func (_m *IAuthService) Register(req request.RegisterRequest) (*response.UserResponse, *utils.TokenHeader, error) {
	ret := _m.Called(req)

	var r0 *response.UserResponse
	var r1 *utils.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(request.RegisterRequest) (*response.UserResponse, *utils.TokenHeader, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.RegisterRequest) *response.UserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.RegisterRequest) *utils.TokenHeader); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(request.RegisterRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResetPassword provides a mock function with given fields: req
func (_m *IAuthService) ResetPassword(req request.ResetPasswordRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.ResetPasswordRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetPasswordEmail provides a mock function with given fields: id, token
func (_m *IAuthService) SendResetPasswordEmail(id uint, token string) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerificationEmail provides a mock function with given fields: id, token
func (_m *IAuthService) SendVerificationEmail(id uint, token int) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyToken provides a mock function with given fields: req
func (_m *IAuthService) VerifyToken(req request.VerifyTokenRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.VerifyTokenRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthService(t mockConstructorTestingTNewIAuthService) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
